---
title: "New Univariate Analysis"
format: html
editor: visual
warning: false
editor_options: 
  chunk_output_type: console
---


## Libraries loading and sources


```{r loading-libreries, echo=FALSE}
library(data.table)
library(janitor)
library(here)
library(dplyr)
library(stringr)
library(echarts4r)
library(reactable)
library(htmltools)
library(ComplexHeatmap)
library(clusterProfiler)
library(org.Hs.eg.db)
library(gt)
library(visNetwork)
library(ggplot2)
library(vsn)
library(ComplexHeatmap)
library(STRINGdb)
library(igraph)
library(network)
library(qgraph)
library(networkD3)
library(httr)
library(jsonlite)
library(rbioapi)

source(file = here::here("myfun_test.R"))
source(file = here::here("theme_ggplot_test.R"))

source(file = here::here("r6class_app.R"))


r6 <- QProMS$new()

```


## Loading raw data


```{r loading-data-1}
raw_data <- loading_data(file_path = here::here("proteinGroups_APEX_P62.txt"))
```

```{r loading-data-2}
r6$loading_data(
  input_path = "proteinGroups_APEX_P62.txt",
  input_type = "max_quant"
)
```


## Make Experimental Design


```{r make-expdesign-1}
exp_des <- exp_design (data=raw_data, pattern_interest = "lfq_intensity_")
```

```{r make-expdesign-2}
r6$make_expdesign(
  start_with = "lfq_intensity_"
)
```


## Data pre-processing


```{r Data preprocessing 1}
data_pre <- pre_process (data=raw_data, pattern_interest =  "lfq_intensity_")
```

```{r Data preprocessing 2}
r6$pg_preprocessing()
```


## Data wrangling merged table (exp_des+pre_process)


```{r Wrangling/Data filtered}
data_wrang <- data_wrangling(data=data_pre,
                             pep_filter = "peptides",
                             pep_thr = 2)
```

```{r data-wrangling}
r6$data_wrangling(
  valid_val_filter = "alog",
  valid_val_thr = 0.75,
  pep_filter = "peptides",
  pep_thr = 2,
  rev = TRUE,
  cont = TRUE,
  oibs = TRUE
)
```


## Filter application


```{r Data Filtered}
data_filt <- data_filtered(data = data_wrang,
                           valid_val_filter = "alog",
                           valid_val_thr = 0.75)
```


## Data imputation


```{r Data imputed}
data_imput <- data_imputed (data= data_filt,
                         shift = 1.8, 
                         scale = 0.3, 
                         unique_visual = FALSE)

```

```{r Imputation}
r6$imputation()
```


## Color palette


```{r Palette}
n_of_color <- max(exp_des %>% dplyr::count(replicate) %>% dplyr::pull(n)) 
color_palette <- viridis::viridis(n = n_of_color , direction = -1, end = 0.70, begin = 0.30)

```


## Quality control


```{r Protein count by condition}
barplot_count(data = data_filt)
```

```{r protein-counts}
r6$plot_protein_counts()
```

```{r Protein Coverage}
barplot_cover(data = data_filt)+
  theme(legend.position = "none")
```

```{r valid-values}
r6$plot_protein_coverage()
```

```{r Normalized data distribution}
boxplot(data=data_filt)
```

```{r plot-dis}
r6$plot_distribution()
```


## Plots


```{r Missing data distribution}
densityplot(data=data_filt)
```

```{r plot-missval2}
r6$plot_missval_distribution()
```

```{r Plot Missing data}
barplot_missval(data=data_filt)
```

```{r plot-missval1}
r6$plot_missing_data()
```

```{r Plot imputation}
den_imput(data=data_filt)
```

```{r plot-imputation}
r6$plot_imputation()
```

```{r Heatmap}
htmap(data = data_filt)
```

```{r plot-corr}
r6$plot_correlation_interactive()
```


## PCA


```{r PCA 1}
pca <- prcomp(t(mat(data= data_imput)), center = TRUE, scale = TRUE)

## create a data.frame for the first 3 PC
pca_table <- data.frame(label = rownames(pca$x),
                        x = pca$x[, 1],
                        y = pca$x[, 2],
                        z = pca$x[, 3]) %>%
  dplyr::left_join(exp_des, by = "label") %>%
  group_by(condition)


pca_plot(data=pca_table)

```

```{r pca}
r6$plot_pca(view_3d = FALSE)
```


## Statistical Analysis


```{r Statistics t-test}
r6$define_tests()
tests <- c("apexonly_vs_apexp62")
r6$stat_t_test(
  data = r6$imputed_data,
  test = tests,
  fc = 1,
  alpha = 0.05
)
```


## Volcao Plot


```{r Volcano}
data <- r6$stat_table%>%
  ggplot2::ggplot(aes(x=rev_vs_dmso_fold_change,
                      y=-log10(rev_vs_dmso_p_val),
                      color=dplyr::case_when(rev_vs_dmso_fold_change > 1 & -log10(rev_vs_dmso_p_val) > 0.5 ~ "red",
                              rev_vs_dmso_fold_change < -1 & -log10(rev_vs_dmso_p_val) > 0.5 ~ "blue",
                              TRUE ~ "grey"))) +
  geom_point()+
  theme_cuc()+
  geom_hline(yintercept = 0.5, linetype="longdash")+
  geom_vline(xintercept = c(-1, 1), linetype="longdash")+
  scale_color_identity()+
  xlim(-7,NA)+
  labs(title= "Volcano plot", subtitle= "Rev VS Dmso", x="Fold change", y= "P-value")
print(data)
```

```{r plot-volcano}
r6$plot_volcano(test = tests, highlights_names = c("VCAN", "STAT3"))
```


## Significant Data


```{r Dataset significat}
sig <- significant(data=r6$stat_table, test = "apexonly_vs_apexp62")
```


### Only Up-regulated


```{r Filter Significant Up}
up_down <- sig_up_down(data=sig, remove="") 
```


# STRINGdb

### Nodes & Edges


```{r Create Nodes & Edges}
nodes <- nodes(data=up_down)

edges <- edges(data= nodes, score=0.7)
```


### Filter Nodes


```{r Filter Nodes Degree 0}
nodes <- filter_nodes (datanodes =nodes, data_edges = edges)
```


### Plot Network


```{r echart Network}
plot_net(datanode=nodes, dataedge=edges)
```


### From data to net


```{r All from nodes to network}
plot_all (
  data = r6$stat_table,
  test = "apexonly_vs_apexp62",
  remove = "Down",
  score = 0.4,
  animation = FALSE,
  layout = "force",
  no_edge = TRUE
)
```


# INTACTdb

### IntAct PSICQUIC

PSICQUIC mi permette di accedere a diversi databases utilizzando una singola funzione. In questo caso ho considerato solo Intact perchÃ¨ per BioGrid e IMEx dava gli stessi risultati. Infatti i db sono tutti strettamente correllati e dipendenti tra loro.


```{r Intact PSICQUIC}
genes <- sig %>%
  dplyr::filter(regulation == "down") %>%
  pull(gene_names)

genes <- nodes %>% pull(name)

intact_edge(genes)

```


## CORUM


```{r CORUM}
library(OmnipathR)

#Solo complessi CORUM
my_complexes <- complexes_corum(data = up_down)

#Solo nodi CORUM (data sono i complessi di corum)
nodes_corum <- nodes_corum(data = my_complexes, query=nodes$name, nodesize = 5)

#Tutti i nodi (STRING+CORUM)
nodes_all <- all_nodes(nodes_string = nodes, nodes_corum = nodes_corum)

#Create a df with all the interactions from corum and their complex
corum_edges <- edges_corum(data=my_complexes, data_filtered = up_down, data_edges = edges)
```

```{r CORUM complexes}
#Set the color palette. Each complex will have a different color
n_of_color <- corum_edges %>% dplyr::group_by(name) %>% dplyr::group_keys() %>% nrow()
color_palette <- viridis::viridis(n = n_of_color , direction = -1, option = "H")
rowcolorpalette <- length(color_palette)


color_complex <- corum_edges %>% 
  dplyr::group_map(~.x) 


color_complex <-  purrr::map(
  .x = 1:rowcolorpalette,
  .f =  ~ dplyr::mutate(color_complex[[.x]], color = color_palette[.x])
) %>%
  purrr::reduce(bind_rows)


#Final edge df, all the color and complex info
final_edges_corum <- color_complex %>% 
  dplyr::right_join(corum_edges)


#All the edges 
edges_all <-  edges %>% dplyr::bind_rows(final_edges_corum) %>% 
   dplyr::mutate(color= if_else(value==10, color,"grey")) %>%
  dplyr::mutate(value= if_else(value==10, 3, value)) %>% 
  as.data.frame() %>% 
  dplyr::mutate(value = round(value, 0)) #Unisco CORUM a STRING

 
#Uso i paramentri del grafico per specificare il colore degli edges
p <-echarts4r::e_charts(animation = FALSE) %>%
   echarts4r::e_graph(
     roam = TRUE,
     force = list(
       initLayout = "force",
       repulsion = 100,
       edgeLength = 30,
       layoutAnimation = FALSE
     ),
     autoCurveness = TRUE,
     emphasis = list(focus = "adjacency",
                     lineStyle = list(width = 10))
   ) %>%
   echarts4r::e_graph_nodes(
     nodes = nodes_all,
     names = name,
     value = value,
     size = size,
     category = grp
   ) %>%
   echarts4r::e_graph_edges(
     edges = edges_all,
     source = source,
     target = target,
     value = value,
     size = value
   ) %>%
  echarts4r::e_labels() %>% 
   echarts4r::e_tooltip()


p2 <- color_edge(list=p, edges=edges_all) 
p2  
```

```{r}
color_nodes <- function(list, nodes) {
  n_nodes <- nrow(nodes)
  for (i in 1:n_nodes) {
    category <-
      list %>%
      purrr::pluck("x", "opts", "series", 1, "data", i, "category")

    list <-
      purrr::modify_in(list,
                       list("x", "opts", "series", 1, "data", i,"category"),
                       \(x) c(x, c(itemStyle= list(borderColor = list(if_else(category=="Up", "red", "blue"))))))
  }
  return(list)
  
}

p <-echarts4r::e_charts(animation = FALSE) %>%
   echarts4r::e_graph(
     roam = TRUE,
     force = list(
       initLayout = "force",
       repulsion = 100,
       edgeLength = 30,
       layoutAnimation = FALSE
     ),
    itemStyle= list(borderWidth=2, borderColor="borderColor"),
     autoCurveness = TRUE,
     emphasis = list(focus = "adjacency",
                     lineStyle = list(width = 10))
   ) %>%
   echarts4r::e_graph_nodes(
     nodes = nodes,
     names = name,
     value = value,
     size = size,
     category = grp,
   ) %>%
   echarts4r::e_graph_edges(
     edges = edges,
     source = source,
     target = target,
     value = value,
     size = value
   ) %>%
  echarts4r::e_labels() %>% 
   echarts4r::e_tooltip()

p5 <- color_nodes(list = p, nodes = nodes)

p5
```

```{r}
tidyr::expand_grid(target = c("gene1", "gene2", "gene3"), source = c("gene1", "gene2", "gene3")) %>% 
  dplyr::filter(target != source)




a <- my_complexes %>%
  dplyr::select(name, components_genesymbols) %>%
  tidyr::separate_rows(components_genesymbols, sep = "_") %>%
  dplyr::filter(components_genesymbols %in% query) %>%
  dplyr::mutate(unique_names = paste0(name, "__", components_genesymbols)) %>%
  dplyr::distinct(unique_names, .keep_all = TRUE) %>%
  dplyr::select(name, components_genesymbols) %>%
  get_dupes(name) %>% 
  dplyr::filter(dupe_count > 2) %>% 
  pull(components_genesymbols) 

b <- tidyr::expand_grid(Target = a, Source = a) %>% 
  dplyr::filter(Target != Source) %>% 
  dplyr::mutate(Value = 10)

final_edge <- b %>% bind_rows(edges_corum)

p3 <- color_edge(list=p, edges=final_edge) 
p3
```

```{r Network ORA}
go_data <- data.table::fread("ora_table.tsv") %>% 
  slice_head(n=10) %>% 
  tibble::rowid_to_column()

nodes_go <- go_data %>% 
  tidyr::separate_rows(geneID, sep = "/") %>% 
  dplyr::filter(group=="nw_vs_dmso_down") %>% 
  dplyr::mutate(name=paste0(Description, "_", geneID)) %>% 
  dplyr::select(Description, name, pvalue, p.adjust, qvalue, value=fold_change, grp=group) %>% 
  tidyr::separate_rows(name, sep = "_") %>% 
  dplyr::distinct(name, .keep_all = TRUE) %>% 
  dplyr::mutate(size=dplyr::if_else(Description==name, value, 10)) %>% 
  dplyr::mutate(symbol=dplyr::if_else(Description==name, "diamond", "circle")) %>% 
  dplyr::mutate(label=dplyr::if_else(Description==name, name, "")) %>% 
  dplyr::select(!Description) %>% 
  dplyr::left_join(go_data %>% dplyr::select(Description, rowid), by=c("name"="Description")) %>% 
  dplyr::arrange(rowid) %>% 
  dplyr::select(-rowid)


edges_go <- go_data%>% 
  dplyr::filter(group== "nw_vs_dmso_down") %>% 
  dplyr::select(Description, pvalue, p.adjust, qvalue, fold_change, geneID) %>% 
  tidyr::separate_rows(geneID, sep = "/") %>% 
    dplyr::select(source=Description, target= geneID, value=pvalue) %>% 
  dplyr::mutate(size="10")
 

  echarts4r::e_charts() %>%
   echarts4r::e_graph(
     roam = TRUE,
     force = list(
       initLayout = "circular",
       repulsion = 500,
       edgeLength = 30,
       layoutAnimation = FALSE
     ),
     autoCurveness = TRUE,
     emphasis = list(focus = "adjacency",
                     lineStyle = list(width = 3))
   ) %>%
   echarts4r::e_graph_nodes(
     nodes = nodes_go,
     names = name,
     value = value,
     size = size,
     category = grp,
     symbol=symbol
   ) %>%
   echarts4r::e_graph_edges(
     edges = edges_go,
     source = source,
     target = target,
     value = value,
     size = size
   ) %>%
  #echarts4r::e_labels(nodes$label, formatter={"b"},font_size=4)%>%
   echarts4r::e_title("Network", "Gene Ontology") %>%
   echarts4r::e_tooltip()
```

