---
title: "New Univariate Analysis"
format: html
editor: visual
warning: false
---

## Libraries loading and sources

```{r loading-libreries, echo=FALSE}
library(data.table)
library(janitor)
library(here)
library(dplyr)
library(stringr)
library(echarts4r)
library(reactable)
library(htmltools)
library(ComplexHeatmap)
library(clusterProfiler)
library(org.Hs.eg.db)
library(gt)
library(visNetwork)
library(ggplot2)
library(vsn)
library(corrmorant)
library(ComplexHeatmap)
library(STRINGdb)
library(igraph)
library(network)
library(qgraph)
library(networkD3)
library(httr)
library(jsonlite)
library(rbioapi)

source(file = "C:/Users/MSU/Documents/GC/Analysis/myfun_test.R")
source(file = "C:/Users/MSU/Documents/GC/Analysis/theme_ggplot_test.R")

source(file = here::here("r6class_app.R"))


r6 <- QProMS$new()

```

## Loading raw data

```{r loading-data-1}
raw_data <- loading_data(file_path = here::here("proteinGroups.txt"))
```

```{r loading-data-2}
r6$loading_data(
  input_path = "C:/Users/MSU/Documents/GC/Analysis/QProMS_test_functions/proteinGroups.txt",
  input_type = "max_quant"
)
```

## Make Experimental Design

```{r make-expdesign-1}
exp_des <- exp_design (data=raw_data, pattern_interest = "lfq_intensity_bc_")
```

```{r make-expdesign-2}
r6$make_expdesign(
  start_with = "lfq_intensity_bc_"
)
```

## Data pre-processing

```{r Data preprocessing 1}
data_pre <- pre_process (data=raw_data, pattern_interest =  "lfq_intensity_bc_")
```

```{r Data preprocessing 2}
r6$pg_preprocessing()
```

## Data wrangling merged table (exp_des+pre_process)

```{r Wrangling/Data filtered}
data_wrang <- data_wrangling(data=data_pre,
                             pep_filter = "peptides",
                             pep_thr = 2)
```

```{r data-wrangling}
r6$data_wrangling(
  valid_val_filter = "alog",
  valid_val_thr = 0.75,
  pep_filter = "peptides",
  pep_thr = 2,
  rev = TRUE,
  cont = TRUE,
  oibs = TRUE
)
```

## Filter application

```{r Data Filtered}
data_filt <- data_filtered(data = data_wrang,
                           valid_val_filter = "alog",
                           valid_val_thr = 0.75)
```

## Data imputation

```{r Data imputed}
data_imput <- data_imputed (data= data_filt,
                         shift = 1.8, 
                         scale = 0.3, 
                         unique_visual = FALSE)

```

```{r Imputation}
r6$imputation()
```

## Color palette

```{r Palette}
n_of_color <- max(exp_des %>% dplyr::count(replicate) %>% dplyr::pull(n))
color_palette <- viridis::viridis(n = n_of_color , direction = -1, end = 0.70, begin = 0.30)

```

## Quality control

```{r Protein count by condition}
barplot_count(data = data_filt)
```

```{r protein-counts}
r6$plot_protein_counts() 
```

```{r Protein Coverage}
barplot_cover(data = data_filt)+
  theme(legend.position = "none")
```

```{r valid-values}
r6$plot_protein_coverage()
```

```{r Normalized data distribution}
boxplot(data=data_filt)
```

```{r plot-dis}
r6$plot_distribution()
```

## Plots

```{r Missing data distribution}
densityplot(data=data_filt)
```

```{r plot-missval2}
r6$plot_missval_distribution()
```

```{r Plot Missing data}
barplot_missval(data=data_filt)
```

```{r plot-missval1}
r6$plot_missing_data()
```

```{r Plot imputation}
den_imput(data=data_filt)    
```

```{r plot-imputation}
r6$plot_imputation()
```

```{r Heatmap}
htmap(data = data_filt)
```

```{r plot-corr}
r6$plot_correlation_interactive()
```

## PCA

```{r PCA 1}
pca <- prcomp(t(mat(data= data_imput)), center = TRUE, scale = TRUE) 
      
## create a data.frame for the first 3 PC
pca_table <- data.frame(label = rownames(pca$x),
                        x = pca$x[, 1],
                        y = pca$x[, 2],
                        z = pca$x[, 3]) %>% 
  dplyr::left_join(exp_des, by = "label") %>% 
  group_by(condition)
 

pca_plot(data=pca_table)

```

```{r pca}
r6$plot_pca(view_3d = FALSE)
```

## Statistical Analysis

```{r Statistics t-test}
r6$define_tests()
tests <- c("rev_vs_dmso", "nw_vs_dmso")
r6$stat_t_test(
  data = r6$imputed_data,
  test = tests,
  fc = 1,
  alpha = 0.05
)
```

## Volcao Plot

```{r VOlcano}
data <- r6$stat_table%>% 
  ggplot2::ggplot(aes(x=rev_vs_dmso_fold_change,
                      y=-log10(rev_vs_dmso_p_val),
                      color=dplyr::case_when(rev_vs_dmso_fold_change > 1 & -log10(rev_vs_dmso_p_val) > 0.5 ~ "red",
                              rev_vs_dmso_fold_change < -1 & -log10(rev_vs_dmso_p_val) > 0.5 ~ "blue",
                              TRUE ~ "grey"))) +
  geom_point()+
  theme_cuc()+
  geom_hline(yintercept = 0.5, linetype="longdash")+
  geom_vline(xintercept = c(-1, 1), linetype="longdash")+
  scale_color_identity()+
  xlim(-7,NA)+
  labs(title= "Volcano plot", subtitle= "Rev VS Dmso", x="Fold change", y= "P-value")
print(data)

```

```{r plot-volcano}
r6$plot_volcano(test = tests, highlights_names = c("VCAN", "STAT3"))
```

## Significant Data

```{r Dataset significat}
sig <- significant(data=r6$stat_table, test = "rev_vs_dmso")
```

### Only Up-regulated

```{r Filter Significant Up}
up_down <- sig_up_down(data=sig, remove="Down")
```

```{r Create Nodes & Edges}
nodes <- nodes(data=up_down)

edges <- edges(data= nodes, score=0.4)
```


```{r Filter Nodes Degree 0}
nodes <- filter_nodes (datanodes =nodes, data_edges = edges)
```

```{r echart prova}

plot_net(datanode=nodes, dataedge=edges)

```

```{r Up}

echarts4r::e_charts(animation=FALSE) %>% 
  e_graph(roam=TRUE, 
          force= list( initLayout = "Circular", 
          repulsion=200,
          edgeLength=2,
          layoutAnimation=FALSE),
             itemStyle=list(opacity=0.65, repulsion=500), 
             lineStyle=list(curveness=0.2, edgeLength=2), 
             emphasis=list(focus="adjacency", 
                           lineStyle=list(width=10)),
          labelLayout= list(hideOverlap=TRUE)) %>% 
  e_graph_nodes(nodes=degree_filtered, names=name,  value= value, size=size, category = grp) %>% 
  e_graph_edges(edges=up_edges, source=Source, target=Target, value=Value, size=Value) %>% 
  e_color(color = "red") %>%
  e_title("Network", "Up Regulated") %>%
  e_labels(degree_filtered$name, font_size=4) %>% 
  e_modularity() %>% 
  e_tooltip()

```


```{r Reactome}
prova <- nodes %>% 
  pull(name) %>% 
  bitr(fromType="SYMBOL", toType="UNIPROT", OrgDb="org.Hs.eg.db") %>%
   dplyr::distinct(SYMBOL, .keep_all = TRUE) %>% 
  left_join(sig, by=c("SYMBOL"="gene_names"))


rba_list <- rba_reactome_interactors_static(proteins=prova$UNIPROT, endpoint = "details")

#Create empty DataFrame
df <- data.frame(Source_Number = numeric(), Source = numeric(), Target_Number = numeric(), Target = numeric(), Score = numeric())

# Fill in the Data Frame                  
for (i in 1:length(rba_list[[2]])) { # Iterate over the entries
  acc_val <- rba_list[["entities"]][[i]][["acc"]] # Extract entry name
  count_val <- rba_list[["entities"]][[i]][["count"]] # Extract count of interactors
  if (count_val > 0) { # Consider only proteins with at least 1 interactor
    for (j in 1:count_val) { # Iterate over the interactors
      acc_interactor <- rba_list[["entities"]][[i]][["interactors"]][[j]][["acc"]] # Extract interactor name
      score_interactor <- rba_list[["entities"]][[i]][["interactors"]][[j]][["score"]] # Extract interactor score
      df <- rbind(df, data.frame (Source_Number = i,
                                  Source = acc_val,
                                  Target_Number = j,
                                  Target = acc_interactor,
                                  Score = score_interactor)) # Add row to df with values
    }}
}

react <- print(df)%>% 
  dplyr::select(Source, Target, Score)

edges <- react %>% 
  

nodes

```


```{r Network D3}


simpleNetwork(Edges_api_df,
              fontSize = 15,
              linkColour ="#013848",
              zoom = TRUE)

forceNetwork(Links = Edges_api_df,
             Nodes = Nodes_api_df,
             Source= "Source",
             Target = "Target",
             Value = "Value",
             NodeID = "name",
             Group ="grp",
             Nodesize = "size")


```


```{r}
plot_all (
  data = r6$stat_table,
  test = "nw_vs_dmso",
  remove = "Down",
  score = 0.4,
  animation = FALSE,
  layout = "circular",
  no_edge = TRUE
)
```

