---
title: "New Univariate Analysis"
format: html
editor: visual
---

# Libraries loading and sources

```{r loading-libreries, echo=FALSE}
library(data.table)
library(janitor)
library(here)
library(dplyr)
library(stringr)
library(echarts4r)
library(reactable)
library(htmltools)
library(ComplexHeatmap)
library(clusterProfiler)
library(org.Hs.eg.db)
library(gt)
library(visNetwork)
library(ggplot2)
library(vsn)
library(corrmorant)

source(file = here::here("r6class_app.R"))

source(file = "C:/Users/MSU/Documents/GC/Analysis/theme_ggplot_test.R")
```

# Loading raw data

```{r loading-data}

loading_data <- function(file_path){
  raw_data <- data.table::fread(file_path) %>% #Carica file
    tibble::as_tibble(.name_repair=janitor::make_clean_names) #Modifica file: il nome delle colonne senza spazi e con minuscolo
  return(raw_data)
}

raw_data <- loading_data(file_path = here::here("proteinGroups.txt"))

```

```{r make-expdesig}
#Creo table exp_des
exp_design <- function(data, pattern_interest){
  
  exp_des <- data %>% 
    dplyr::select(gene_names, dplyr::starts_with(pattern_interest)) %>%
    tidyr::pivot_longer(!gene_names, names_to="key", values_to= "intensity") %>% #Raggruppa tutte le lfq in unica colonna
    dplyr::distinct(key) %>%
    dplyr::mutate(label = stringr::str_remove(key, "lfq_intensity_bc_")) %>%
    dplyr::mutate(condition = stringr::str_remove(label, "_[^_]*$")) %>%
    dplyr::mutate(replicate = stringr::str_remove(label, ".*_"))
  
  return(exp_des)
}

exp_des <- exp_design (data=raw_data, pattern_interest = "lfq_intensity_bc_")
```

```{r Data preprocessing}
pre_process <- function(data, pattern_interest){
  
  data_pre <- data %>% 
  dplyr::mutate(dplyr::across(dplyr::starts_with(pattern_interest), ~ log2(.))) %>%
  dplyr::mutate(dplyr::across(dplyr::starts_with(pattern_interest), ~ dplyr::na_if(.,-Inf)))
  
  return(data_pre)
}

data_pre <- pre_process (data=raw_data, pattern_interest =  "lfq_intensity_bc_")
```

```{r Wrangling/Data filtered}
data_wrangling <- function(data, 
                           pep_filter, 
                           pep_thr, 
                           rev,
                           cont,
                           oibs){
  
  data_wrang <- data %>% #DATA STANDARDIZED
    dplyr::select(protein_i_ds, gene_names, id) %>%
    dplyr::mutate(gene_names = stringr::str_extract(gene_names, "[^;]*")) %>%
 ## every protein groups now have only 1 gene name associated to it
    dplyr::rename(unique_gene_names = gene_names) %>%
    janitor::get_dupes(unique_gene_names) %>%
    dplyr::mutate(unique_gene_names = dplyr::case_when(
    unique_gene_names != "" ~ paste0(
    unique_gene_names, "__",
    stringr::str_extract(protein_i_ds, "[^;]*")),
    TRUE ~ stringr::str_extract(protein_i_ds, "[^;]*"))) %>%
    dplyr::select(unique_gene_names, id) %>%
    dplyr::right_join(data, by = "id") %>%
    dplyr::mutate(gene_names = dplyr::case_when(unique_gene_names != "" ~ unique_gene_names,
                                                TRUE ~ gene_names)) %>%
    dplyr::select(-unique_gene_names) %>%
    dplyr::mutate(gene_names = dplyr::if_else(gene_names == "",
                                                stringr::str_extract(protein_i_ds, "[^;]*"),
                                                gene_names)) %>%
    dplyr::mutate(gene_names = stringr::str_extract(gene_names, "[^;]*")) %>% 
    dplyr::select(gene_names,
                  dplyr::all_of(exp_des$key),
                  peptides,
                  razor_unique_peptides,
                  unique_peptides,
                  reverse,
                  potential_contaminant,
                  only_identified_by_site) %>% 
      tidyr::pivot_longer(!c(gene_names,
                             peptides,
                             razor_unique_peptides,
                             unique_peptides,
                             reverse,
                             potential_contaminant,
                             only_identified_by_site),
                          names_to = "key",
                          values_to = "raw_intensity") %>% 
      dplyr::inner_join(., exp_des, by = "key") %>%   #aggiunge righe e colonne che matchano tra expdesign e data
      dplyr::mutate(bin_intensity = dplyr::if_else(is.na(raw_intensity), 0, 1)) %>%  #Nuova colonna. 1 se valore esite, 0 se NA
      dplyr::select(-key) %>% 
    {if(rev)dplyr::filter(., !reverse == "+") else .} %>% #DATA WRANGLING
          {if(cont)dplyr::filter(., !potential_contaminant == "+") else .} %>%
          {if(oibs)dplyr::filter(., !only_identified_by_site == "+") else .} %>% 
          ## filter on peptides:
          {if(pep_filter == "peptides"){dplyr::filter(., peptides >= pep_thr)}
            else if (pep_filter == "unique") {dplyr::filter(., unique_peptides >= pep_thr)}
            else {dplyr::filter(., razor_unique_peptides >= pep_thr)}}
  
  return(data_wrang)
    
}

data_wrang <- data_wrangling(data=data_pre,
                             pep_filter = "peptides",
                             pep_thr = 2,
                             rev = TRUE,
                             cont = TRUE,
                             oibs = TRUE)
```

```{r Data Filtered}
data_filtered <- function(data,
                      valid_val_filter,
                      valid_val_thr) {
  data_filt<- data %>% 
  {if(valid_val_filter == "total")dplyr::group_by(., gene_names)
          else dplyr::group_by(., gene_names, condition)} %>% 
        dplyr::mutate(miss_val = dplyr::n() - sum(bin_intensity)) %>% 
        dplyr::mutate(n_size = dplyr::n()) %>%
        dplyr::ungroup() %>%
        dplyr::group_by(gene_names) %>%
        ## rage compreso tra 0 e 100% espresso in valori tra 0 e 1
        {if(valid_val_filter == "alog") dplyr::filter(., any(miss_val <= round(n_size * (1 - valid_val_thr), 0)))
          else dplyr::filter(., all(miss_val <= round(n_size * (1 - valid_val_thr), 0)))} %>%
        dplyr::ungroup() %>%
        dplyr::select(gene_names, label, condition, replicate, bin_intensity, raw_intensity) %>% 
        dplyr::rename(intensity = raw_intensity)
  return(data_filt)
}

data_filt <- data_filtered(data = data_wrang,
                           valid_val_filter = "alog",
                           valid_val_thr = 0.75)
```

```{r Data imputed}
data_imputed <- function(data,
                         shift, 
                         scale, 
                         unique_visual = FALSE){
  
  imputed_data <- data %>%
            dplyr::group_by(gene_names, condition) %>%
            dplyr::mutate(for_mean_imp = dplyr::if_else((sum(bin_intensity) / dplyr::n()) >= 0.75, TRUE, FALSE)) %>%
            dplyr::mutate(mean_grp = mean(intensity, na.rm = TRUE)) %>%
            dplyr::ungroup() %>%
            dplyr::mutate(imp_intensity = dplyr::case_when(
              bin_intensity == 0 & for_mean_imp ~ mean_grp,
              TRUE ~ as.numeric(intensity))) %>%
            dplyr::mutate(intensity = imp_intensity) %>% 
            dplyr::select(-c(for_mean_imp, mean_grp, imp_intensity))%>%
  dplyr::group_by(label) %>%
# Define statistic to generate the random distribution relative to sample
  dplyr::mutate(mean = mean(intensity, na.rm = TRUE),
                sd = sd(intensity, na.rm = TRUE),
                n = sum(!is.na(intensity)),
                total = nrow(data) - n) %>%
  dplyr::ungroup() %>%
# Impute missing values by random draws from a distribution
# which is left-shifted by parameter 'shift' * sd and scaled by parameter 'scale' * sd.
  dplyr::mutate(imp_intensity = dplyr::case_when(is.na(intensity) ~ rnorm(total,
                                                                          mean = (mean - shift * sd), 
                                                                          sd = sd * scale),
                                                 TRUE ~ intensity)) %>%
  dplyr::mutate(intensity = imp_intensity) %>%
  dplyr::select(-c(mean, sd, n, total, imp_intensity)) %>%
  dplyr::group_by(condition)
 
  return(imputed_data) 
}

data_imput <- data_imputed (data= data_filt,
                         shift = 1.8, 
                         scale = 0.3, 
                         unique_visual = FALSE)

```


```{r Palette}
Palette <- function(){
      n_of_color <- max(exp_des %>% dplyr::count(replicate) %>% dplyr::pull(n))
      color_palette <- viridis::viridis(n = n_of_color , direction = -1, end = 0.70, begin = 0.30)
    }
```



```{r Barplot}
barplot <- function (data,
                     x,
                     y,
                     fill,
                     width_barplot,
                     plot_title,
                     label,
                     xtitle,
                     ytitle){
  barplot <- data %>% 
  ggplot(data, aes(x, y, fill))+
  geom_bar(stat="identity", width = width_barplot, color="black")+
  scale_fill_manual(values = color_palette)+
  theme_cuc()+
  theme(axis.text.x = element_text(angle = 30))+
  labs(title= plot_title, x=xtitle, y=ytitle)+
  geom_text(aes(label=label), vjust=-0.2, size=4)
  
  return(barplot)
}

data_filt <- dplyr::group_by(label) %>%
        dplyr::summarise(counts = sum(bin_intensity)) %>%
        dplyr::ungroup() %>%
        dplyr::inner_join(., expdesign, by = "label") %>%
        dplyr::mutate(replicate = as.factor(replicate)) %>%
        dplyr::group_by(condition) %>% 
protein-counts-static <- barplot(data = data_filt, 
                                 x= label, 
                                 y=counts, 
                                 fill=condition,
                                 color="black",
                                 width_barplot = 0.5,
                                 plot_title = "Protein counts by condition",
                                 label = count,
                                 xtitle = "Label",
                                 ytitle = "Counts")


```

```{r Boxplot}
boxplot <- function (data,
                     x,
                     y,
                     fill,
                     width_boxplot,
                     plot_title,
                     label,
                     xtitle,
                     ytitle){
  boxplot <- data %>% 
ggplot(data, aes(x, y, fill))+
  geom_boxplot(width=width_boxplot, color="black")+
  scale_fill_manual(values = color_palette)+
  theme_CUc()+
  labs(title=plot_title)
  
  return(boxplot)
}
```

