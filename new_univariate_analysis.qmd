---
title: "New Univariate Analysis"
format: html
editor: visual
warning: false
editor_options: 
  chunk_output_type: console
---

## Libraries loading and sources

```{r loading-libreries, echo=FALSE}
library(data.table)
library(janitor)
library(here)
library(dplyr)
library(stringr)
library(echarts4r)
library(reactable)
library(htmltools)
library(ComplexHeatmap)
library(clusterProfiler)
library(org.Hs.eg.db)
library(gt)
library(visNetwork)
library(ggplot2)
library(vsn)
library(ComplexHeatmap)
library(STRINGdb)
library(igraph)
library(network)
library(qgraph)
library(networkD3)
library(httr)
library(jsonlite)
library(rbioapi)
library(purrr)
library(r3dmol)

source(file = here::here("myfun_test.R"))
source(file = here::here("theme_ggplot_test.R"))

source(file = here::here("r6class_app.R"))


r6 <- QProMS$new()

```

## Loading raw data

```{r loading-data-1}
raw_data <- loading_data(file_path = here::here("proteinGroups2.txt"))
```

```{r loading-data-2}
r6$loading_data(
  input_path = "proteinGroups2.txt",
  input_type = "max_quant"
)
```

## Make Experimental Design

```{r make-expdesign-1}
exp_des <- exp_design (data=raw_data, pattern_interest = "lfq_intensity_")
```

```{r make-expdesign-2}
r6$make_expdesign(
  start_with = "lfq_intensity_"
)
```

## Data pre-processing

```{r Data preprocessing 1}
data_pre <- pre_process (data=raw_data, pattern_interest =  "lfq_intensity_")
```

```{r Data preprocessing 2}
r6$pg_preprocessing()
```

## Data wrangling merged table (exp_des+pre_process)

```{r Wrangling/Data filtered}
data_wrang <- data_wrangling(data=data_pre,
                             pep_filter = "peptides",
                             pep_thr = 2)
```

```{r data-wrangling}
r6$data_wrangling(
  valid_val_filter = "alog",
  valid_val_thr = 0.75,
  pep_filter = "peptides",
  pep_thr = 2,
  rev = TRUE,
  cont = TRUE,
  oibs = TRUE
)
```

## Filter application

```{r Data Filtered}
data_filt <- data_filtered(data = data_wrang,
                           valid_val_filter = "alog",
                           valid_val_thr = 0.75)
```

## Data imputation

```{r Data imputed}
data_imput <- data_imputed (data= data_filt,
                         shift = 1.8, 
                         scale = 0.3, 
                         unique_visual = FALSE)

```

```{r Imputation}
r6$imputation()
```

## Color palette

```{r Palette}
n_of_color <- max(exp_des %>% dplyr::count(replicate) %>% dplyr::pull(n)) 
color_palette <- viridis::viridis(n = n_of_color , direction = -1, end = 0.70, begin = 0.30)

```

## Quality control

```{r Protein count by condition}
barplot_count(data = data_filt)
```

```{r protein-counts}
r6$plot_protein_counts()
```

```{r Protein Coverage}
barplot_cover(data = data_filt)+
  theme(legend.position = "none")
```

```{r valid-values}
r6$plot_protein_coverage()
```

```{r Normalized data distribution}
boxplot(data=data_filt)
```

```{r plot-dis}
r6$plot_distribution()
```

## Plots

```{r Missing data distribution}
densityplot(data=data_filt)
```

```{r plot-missval2}
r6$plot_missval_distribution()
```

```{r Plot Missing data}
barplot_missval(data=data_filt)
```

```{r plot-missval1}
r6$plot_missing_data()
```

```{r Plot imputation}
den_imput(data=data_filt)
```

```{r plot-imputation}
r6$plot_imputation()
```

```{r Heatmap}
htmap(data = data_filt)
```

```{r plot-corr}
r6$plot_correlation_interactive()
```

## PCA

```{r PCA 1}
pca <- prcomp(t(mat(data= data_imput)), center = TRUE, scale = TRUE)

## create a data.frame for the first 3 PC
pca_table <- data.frame(label = rownames(pca$x),
                        x = pca$x[, 1],
                        y = pca$x[, 2],
                        z = pca$x[, 3]) %>%
  dplyr::left_join(exp_des, by = "label") %>%
  group_by(condition)


pca_plot(data=pca_table)

```

```{r pca}
r6$plot_pca(view_3d = FALSE)
```

## Statistical Analysis

```{r Statistics t-test}
r6$define_tests()
tests <- c("tc1d22b_vs_ev")
r6$stat_t_test(
  data = r6$imputed_data,
  test = tests,
  fc = 0,
  alpha = 0.05
)
```

## Volcao Plot

```{r Volcano}
data <- r6$stat_table%>%
  ggplot2::ggplot(aes(x=rev_vs_dmso_fold_change,
                      y=-log10(rev_vs_dmso_p_val),
                      color=dplyr::case_when(rev_vs_dmso_fold_change > 1 & -log10(rev_vs_dmso_p_val) > 0.5 ~ "red",
                              rev_vs_dmso_fold_change < -1 & -log10(rev_vs_dmso_p_val) > 0.5 ~ "blue",
                              TRUE ~ "grey"))) +
  geom_point()+
  theme_cuc()+
  geom_hline(yintercept = 0.5, linetype="longdash")+
  geom_vline(xintercept = c(-1, 1), linetype="longdash")+
  scale_color_identity()+
  xlim(-7,NA)+
  labs(title= "Volcano plot", subtitle= "Rev VS Dmso", x="Fold change", y= "P-value")
print(data)
```

```{r plot-volcano}
r6$plot_volcano(test = tests, highlights_names = c("VCAN", "STAT3"))
```

## Significant Data

```{r Dataset significat}
sig <- significant(data=r6$stat_table, test = "tc1d22b_vs_ev")
```

### Only Up-regulated

```{r Filter Significant Up}
up_down <- sig_up_down(data=sig, remove="Down") 
```

# STRINGdb

### Nodes & Edges

```{r Create Nodes & Edges}
nodes <- function(data, nodesize=5){
  data <- data %>% 
    dplyr::pull(gene_names) %>% 
    rba_string_map_ids(species = 9606, echo_query = TRUE) %>%
    dplyr::select(stringId, preferredName, annotation ) %>% 
    dplyr::rename(name=preferredName) %>% 
    dplyr::left_join(sig, by= c("name"="gene_names")) %>% 
    dplyr::select(-c(stringId, annotation, fold_change)) %>% 
    dplyr::rename(value =p_adj, size = p_val, grp = regulation) %>% 
    dplyr::mutate(value = -log10(value)) %>% 
    dplyr::mutate(size = -log10(size)*nodesize) %>% 
    dplyr::mutate(grp = as.factor(grp)) %>% 
    tidyr::as_tibble()
  
  return(data)
}

nodes <- nodes(data=up_down)

edges <- nodes %>%
    dplyr::pull(name) %>%
    rba_string_interactions_network(species = 9606) %>%
    dplyr::mutate(Names = paste0(preferredName_A, "_", preferredName_B)) %>%
    dplyr::distinct(Names, .keep_all = TRUE) %>%
    dplyr::filter(escore != 0, dscore != 0) %>%
    tidyr::unite("stringId", stringId_A:stringId_B, remove = TRUE) %>%
    dplyr::distinct(stringId, .keep_all = TRUE) %>%
    #dplyr::select(FROM,TO, escore, dscore) %>%
    #se facessi tidyr::unite() potrei unire due colonne in una unica e poi fare il distinct
    dplyr::mutate(Score1 = (escore - 0.041) * (1 - 0.041)) %>%
    dplyr::mutate(Score2 = (dscore - 0.041) * (1 - 0.041)) %>%
    dplyr::mutate(Score_combin = 1 - (1 - Score1) * (1 - Score2)) %>%
    dplyr::mutate(tot_score = Score_combin + 0.041 * (1 - Score_combin)) %>%
    dplyr::filter(tot_score > 0.9) %>% #Filtro sullo score
    dplyr::select(source = preferredName_A, target = preferredName_B, score) %>%
    dplyr::filter(source != target)


#edges <- edges(data= nodes, score=0.5)

```

### Filter Nodes

```{r Filter Nodes Degree 0}
nodes <- filter_nodes (datanodes =nodes, data_edges = edges)
```

### Plot Network

```{r echart Network}
plot_net(datanode=nodes, dataedge=edges)
```

### From data to net

```{r All from nodes to network}
plot_all (
  data = r6$stat_table,
  test = "rev_vs_dmso",
  remove = "Down",
  score = 0.4,
  animation = FALSE,
  layout = "force",
  no_edge = TRUE
)
```

# INTACTdb

### IntAct PSICQUIC

PSICQUIC mi permette di accedere a diversi databases utilizzando una singola funzione. In questo caso ho considerato solo Intact perchÃ¨ per BioGrid e IMEx dava gli stessi risultati. Infatti i db sono tutti strettamente correllati e dipendenti tra loro.

```{r Intact PSICQUIC}
genes <- sig %>%
  dplyr::filter(regulation == "down") %>%
  pull(gene_names)

genes <- nodes %>% pull(name)

edge_intact <-intact_edge(genes)




  intact_list <- rba_reactome_interactors_psicquic(genes, resource = "IntAct", details = TRUE)
  
  all_interactions <- purrr::map(.x = 1:length(genes),
                                 .f = ~ intact_list$entities[[.x]])
  
  res <- purrr::map(.x = all_interactions, .f = ~ keep_only_if_present(.x)) %>%
    purrr::compact() %>%
    purrr::reduce(bind_rows) %>%
    dplyr::select(source, alias, score, accURL, evidences) %>%
    tidyr::drop_na() %>%
    dplyr::filter(source != alias)


```

## CORUM

```{r CORUM}
library(OmnipathR)

#Solo complessi CORUM
my_complexes <- complexes_corum(data = up_down)

#Solo nodi CORUM (data sono i complessi di corum)
query <- nodes$name
nodes_corum <- nodes_corum(data = my_complexes, nodesize = 5)

#Tutti i nodi (STRING+CORUM)
nodes_all <- all_nodes(nodes_string = nodes, nodes_corum = nodes_corum)

#Create a df with all the interactions from corum and their complex
corum_edges <- edges_corum(data=my_complexes, data_filtered = up_down, data_edges = edges)



```


```{r CORUM complexes}
#Set the color palette. Each complex will have a different color
n_of_color <- corum_edges %>% dplyr::group_by(name) %>% dplyr::group_keys() %>% nrow()
color_palette <- viridis::viridis(n = n_of_color , direction = -1, option = "H")
rowcolorpalette <- length(color_palette)


color_complex <- corum_edges %>% 
  dplyr::group_map(~.x) 


color_complex <-  purrr::map(
  .x = 1:rowcolorpalette,
  .f =  ~ dplyr::mutate(color_complex[[.x]], color = color_palette[.x])
) %>%
  purrr::reduce(bind_rows)


#Final edge df, all the color and complex info
final_edges_corum <- color_complex %>% 
  dplyr::right_join(corum_edges)


#All the edges 
edges_all <-  edges %>% dplyr::bind_rows(final_edges_corum) %>% 
   dplyr::mutate(color= if_else(value==10, color,"grey")) %>%
  dplyr::mutate(value= if_else(value==10, 3, value)) %>% 
  as.data.frame() %>% 
  dplyr::mutate(value = round(value, 0)) #Unisco CORUM a STRING

 
#Uso i paramentri del grafico per specificare il colore degli edges
p <-echarts4r::e_charts(animation = FALSE) %>%
   echarts4r::e_graph(
     roam = TRUE,
     force = list(
       initLayout = "force",
       repulsion = 100,
       edgeLength = 30,
       layoutAnimation = FALSE
     ),
     autoCurveness = TRUE,
     emphasis = list(focus = "adjacency",
                     lineStyle = list(width = 10))
   ) %>%
   echarts4r::e_graph_nodes(
     nodes = nodes,
     names = name,
     value = value,
     size = size,
     category = grp
   ) %>%
   echarts4r::e_graph_edges(
     edges = edges_all,
     source = source,
     target = target,
     value = value,
     size = value
   ) %>%
  echarts4r::e_labels() %>% 
   echarts4r::e_tooltip()


p2 <- color_edge(list=p, edges=edges_all) 
p2  
```


```{r}
make_nodes <- function(list_from, focus, direction) {
      
      if (list_from == "univariate") {
        
        nodes_table <- r6$stat_table %>%
          dplyr::select(gene_names, dplyr::starts_with(focus)) %>%
          dplyr::rename_at(dplyr::vars(dplyr::matches(focus)), ~ stringr::str_remove(., paste0(focus, "_"))) %>%
          dplyr::filter(significant) %>%
          dplyr::mutate(dplyr::across(c("p_val", "p_adj"), ~ -log10(.))) %>%
          dplyr::mutate(dplyr::across(c("p_val", "p_adj"), ~ round(., 2))) %>% 
          dplyr::mutate(gene_names = stringr::str_extract(gene_names, "[^;_]*")) %>%
          dplyr::distinct(gene_names, .keep_all = TRUE) %>% 
          dplyr::mutate(
            category = dplyr::if_else(fold_change > 0, "up", "down"),
            size = p_val * 5,
            color = dplyr::case_when(
              fold_change > 0 & fold_change <= 1.5 ~ "#fddbc7",
              fold_change > 1.5 &
                fold_change <= 2 ~ "#f4a582",
              fold_change > 2 &
                fold_change <= 2.5 ~ "#d6604d",
              fold_change > 2.5 &
                fold_change <= 3 ~ "#b2182b",
              fold_change > 3 ~ "#67001f",
              fold_change < 0 &
                fold_change >= -1.5 ~ "#d1e5f0",
              fold_change < -1.5 &
                fold_change >= -2 ~ "#92c5de",
              fold_change < -2 &
                fold_change >= -2.5 ~ "#4393c3",
              fold_change < -2.5 &
                fold_change >= -3 ~ "#2166ac",
              fold_change < -3 ~ "#053061",
            )
          )
        
        if (direction == "up") {
          nodes_table <- nodes_table %>% 
            dplyr::filter(category == "up")
        } else if (direction == "down") {
          nodes_table <- nodes_table %>% 
            dplyr::filter(category == "down")
        }
        
      } else {
        
        nodes_table <- self$anova_table %>% 
          dplyr::filter(significant) %>%
          dplyr::mutate(dplyr::across(c("p_val", "p_adj"), ~ -log10(.))) %>%
          dplyr::mutate(dplyr::across(c("p_val", "p_adj"), ~ round(., 2))) %>% 
          dplyr::mutate(gene_names = stringr::str_extract(gene_names, "[^;_]*")) %>%
          dplyr::distinct(gene_names, .keep_all = TRUE) %>% 
          dplyr::filter(cluster %in% focus) %>% 
          dplyr::mutate(
            category = cluster,
            size = p_val * 2
          )
        
      }
      
      nodes_table_final <- nodes_table
      
      
      return(nodes_table_final)
      
    }

make_edges <- function(source, names) {
      
      edges_string_table <- NULL
      edges_corum_table <- NULL
      
      if("string" %in% source) {
        
        edges_string_table <-
          
          names %>%
          rba_string_interactions_network(species = 9606) %>%
          dplyr::filter(escore != 0, dscore != 0) %>%
          tidyr::unite("stringId", stringId_A:stringId_B, remove = TRUE) %>%
          dplyr::distinct(stringId, .keep_all = TRUE) %>%
          ## string calculation for fisical score
          dplyr::mutate(score1 = (escore - 0.041) * (1 - 0.041)) %>%
          dplyr::mutate(score2 = (dscore - 0.041) * (1 - 0.041)) %>%
          dplyr::mutate(score_combin = 1 - (1 - score1) * (1 - score2)) %>%
          dplyr::mutate(score = score_combin + 0.041 * (1 - score_combin)) %>%
          ## end
          dplyr::select(source = preferredName_A, target = preferredName_B, score) %>%
          dplyr::filter(source != target) %>%
          dplyr::mutate(complex = "not defined", color = "#999999")
        
        if (nrow(edges_string_table) == 0) {
          edges_string_table <- NULL
        }
        
      }
      
      if("corum" %in% source) {
        
        raw_corum_table <-
          get_complex_genes(import_omnipath_complexes(resources = "CORUM"),
                            names,
                            total_match = FALSE) %>%
          unique() %>%
          dplyr::select(name, components_genesymbols) %>%
          tidyr::separate_rows(components_genesymbols, sep = "_") %>%
          dplyr::filter(components_genesymbols %in% names) %>%
          unique() %>%
          get_dupes(name)
        
        if (nrow(raw_corum_table) != 0) {
          
          expand_nodes <- raw_corum_table %>%
            dplyr::group_by(name) %>%
            dplyr::group_map( ~ dplyr::pull(.x, components_genesymbols))
          
          edges_corum_table <-
            map(.x = expand_nodes, .f = ~ as.data.frame(t(combn(.x, 2)))) %>%
            reduce(dplyr::bind_rows) %>%
            dplyr::rename(target = V1,  source = V2) %>%
            dplyr::left_join(raw_corum_table, by = c("source" = "components_genesymbols")) %>%
            dplyr::select(-dupe_count) %>%
            unique() %>% 
            dplyr::mutate(score=1, color = "#4daf4a") %>% 
            dplyr::rename(complex = name) %>% 
             dplyr::group_by(source, target, color) %>% 
            tidyr::nest() %>% 
            tidyr::unnest_wider(data, names_sep = "_") %>%
            dplyr::ungroup() %>% 
            dplyr::rowwise() %>% 
            dplyr::mutate(
              score = sum(data_score),
              complex = toString(data_complex),
              size = dplyr::if_else(score <= 5, score, 5),
              database = "Corum"
            ) %>% 
            dplyr::select(source, target, complex, score, color, size, database)
        } else {
          edges_corum_table <- NULL
        }
        
      }
      
      if (is.null(edges_string_table) & is.null(edges_corum_table)) {
        edges_table_final <- NULL
      } else {
        edges_table_final <- edges_string_table %>%
          dplyr::bind_rows(edges_corum_table) %>% 
          dplyr::mutate(size = 2.5)
        
    
      }
      return(edges_table_final)
    }

plot_ppi_network <- function(edge, node, list_from, score_thr, isolate_nodes, layout, show_names) {
      
      edges <- edge %>% 
        dplyr::filter(score >= score_thr)
      nodes <- node
      
      if(!isolate_nodes) {
        
        edge_source <- edges %>% dplyr::pull(source)
        edge_target <- edges %>% dplyr::pull(target)
        
        list <- c(edge_source, edge_target)
        final_list <- unique(list)
        
        nodes <- nodes %>%
          dplyr::filter(gene_names %in% final_list)
        
      }
      
      p <- echarts4r::e_charts() %>%
        echarts4r::e_graph(
          roam = TRUE,
          layout = layout,
          zoom = 0.5,
          force = list(
            initLayout = "circular",
            repulsion = 800,
            edgeLength = 150,
            layoutAnimation = FALSE
          ),
          autoCurveness = TRUE,
          emphasis = list(focus = "adjacency")
        ) %>%
        echarts4r::e_graph_nodes(
          nodes = nodes,
          names = gene_names,
          value = p_val,
          size = size,
          category = category
          # legend = FALSE
        ) %>%
        echarts4r::e_graph_edges(
          edges = edges,
          source = source,
          target = target,
          value = score,
          size = size
        ) %>%
        echarts4r::e_tooltip()
      
      if (show_names) {
        p <- p %>% 
          echarts4r::e_labels(fontSize = 10) 
      }
      
      for(i in 1:nrow(edges)) {
        p$x$opts$series[[1]]$links[[i]]$lineStyle$color <- edges[i, ]$color
      }
      
      if(list_from == "univariate") {
        for (i in 1:nrow(nodes)) {
          p$x$opts$series[[1]]$data[[i]]$itemStyle$color <- nodes[i, ]$color
        }
      }
      
      return(p)
      
    }
  
```


```{r}
library(purrr)
nodes <- make_nodes(list_from = "univariate", focus = "tc1d22b_vs_ev", direction = "up")

nodes_name <- nodes %>% dplyr::pull(gene_names)
edges_corum <- make_edges(source = "corum", names=nodes_name)

p <- plot_ppi_network(edge = edges, node = nodes, list_from = "univariate", score_thr = 0.4, isolate_nodes = FALSE, layout = "force", show_names = FALSE)
p


```

###ROC curve
```{r Set random combination across upregulater}
all_edges <- make_edges(source = c("string", "corum"), names=nodes_name)

edges_string <-  make_edges(source = "string", names=nodes_name)

true_positive <- edges_corum %>% 
  filter(source %in% edges_string$source & target %in% edges_string$target | source %in% edges_string$target & target %in% edges_string$source) %>% View() #CORUM source/target in EdgesSTRING

false_negative <- edges_corum %>% 
  filter(!source %in% edges_string$source & !target %in% edges_string$target) %>% View() #CORUM source/target NOT in EdgesSTRING



random_comb <- all_edges %>%
  tidyr::expand_grid(
    target = all_edges$target,
    source = all_edges$source,
    .name_repair = "check_unique"
  ) %>%
  dplyr::filter(target != source)






# library(pROC)
# library(randomForest)
# set.seed(420)
# num.sample <- nrow(all_edges)
# weight <- sort(rnorm(n=num.sample), mean=mean(all_edges$score), sd=sd(all_edges$score))
# significant <- ifelse(test=runif(n=num.sample) > score)
```









###PROTEIN STRUCTURES
```{r From gene_names to PDB_id}
pdb_id <- function(data){
  prot_id <- data %>% 
  dplyr::filter(!reverse == "+", !potential_contaminant == "+", !only_identified_by_site == "+") %>% 
  dplyr::mutate(protein_i_ds= stringr::str_extract(protein_i_ds, "[^;]*")) %>% 
  pull(protein_i_ds) 
  
uniprot_information <-
  fetch_uniprot(
    uniprot_ids = prot_id,
    columns = c("xref_pdb")
  ) %>%  
tidyr::drop_na("xref_pdb") %>%
  dplyr::mutate(pdb_id = stringr::str_extract(xref_pdb, "[^;]*")) %>% 
  dplyr::inner_join(data, by=c("accession"="protein_i_ds")) %>% 
    dplyr::select(uniprot_id=accession, pdb_id, gene_names)  

return(uniprot_information)
}

```

```{r Structures}
#PROVA
structure <-
  function(pdb_id,
           color_structure = "#00AFBB",
           color_helix = "#636efa",
           color_sheet = "#FC4E07") {
    p <- r3dmol() %>%
      m_add_model(data = m_fetch_pdb(pdb_id), format = "pdb") %>%
      m_set_style(m_style_cartoon()) %>% #set style: cartoon or stick
      m_zoom_to() %>%
      # Set style of structures
      m_set_style(style = m_style_cartoon(color_structure)) %>%
      # Style the alpha helix
      m_set_style(sel = m_sel(ss = "h"), # Style alpha helix
                  style = m_style_cartoon(color_helix)) %>%
      m_set_style(sel = m_sel(ss = "s"), # Style beta sheet
                  style = m_style_cartoon(color_sheet))
    return(p)
  }

bob <- structure(pdb_id = "2HF6")
bob

```

```{r}
tidyr::expand_grid(target = c("gene1", "gene2", "gene3"), source = c("gene1", "gene2", "gene3")) %>% 
  dplyr::filter(target != source)




a <- my_complexes %>%
  dplyr::select(name, components_genesymbols) %>%
  tidyr::separate_rows(components_genesymbols, sep = "_") %>%
  dplyr::filter(components_genesymbols %in% query) %>%
  dplyr::mutate(unique_names = paste0(name, "__", components_genesymbols)) %>%
  dplyr::distinct(unique_names, .keep_all = TRUE) %>%
  dplyr::select(name, components_genesymbols) %>%
  get_dupes(name) %>% 
  dplyr::filter(dupe_count > 2) %>% 
  pull(components_genesymbols) 

b <- tidyr::expand_grid(Target = a, Source = a) %>% 
  dplyr::filter(Target != Source) %>% 
  dplyr::mutate(Value = 10)

final_edge <- b %>% bind_rows(edges_corum)

p3 <- color_edge(list=p, edges=final_edge) 
p3
```

```{r Network ORA}
go_data <- data.table::fread("ora_table.tsv") %>% 
  slice_head(n=10) %>% 
  tibble::rowid_to_column()

nodes_go <- go_data %>% 
  tidyr::separate_rows(geneID, sep = "/") %>% 
  dplyr::filter(group=="nw_vs_dmso_down") %>% 
  dplyr::mutate(name=paste0(Description, "_", geneID)) %>% 
  dplyr::select(Description, name, pvalue, p.adjust, qvalue, value=fold_change, grp=group) %>% 
  tidyr::separate_rows(name, sep = "_") %>% 
  dplyr::distinct(name, .keep_all = TRUE) %>% 
  dplyr::mutate(size=dplyr::if_else(Description==name, value, 10)) %>% 
  dplyr::mutate(symbol=dplyr::if_else(Description==name, "diamond", "circle")) %>% 
  dplyr::mutate(label=dplyr::if_else(Description==name, name, "")) %>% 
  dplyr::select(!Description) %>% 
  dplyr::left_join(go_data %>% dplyr::select(Description, rowid), by=c("name"="Description")) %>% 
  dplyr::arrange(rowid) %>% 
  dplyr::select(-rowid)


edges_go <- go_data%>% 
  dplyr::filter(group== "nw_vs_dmso_down") %>% 
  dplyr::select(Description, pvalue, p.adjust, qvalue, fold_change, geneID) %>% 
  tidyr::separate_rows(geneID, sep = "/") %>% 
    dplyr::select(source=Description, target= geneID, value=pvalue) %>% 
  dplyr::mutate(size="10")
 

  echarts4r::e_charts() %>%
   echarts4r::e_graph(
     roam = TRUE,
     force = list(
       initLayout = "circular",
       repulsion = 500,
       edgeLength = 30,
       layoutAnimation = FALSE
     ),
     autoCurveness = TRUE,
     emphasis = list(focus = "adjacency",
                     lineStyle = list(width = 3))
   ) %>%
   echarts4r::e_graph_nodes(
     nodes = nodes_go,
     names = name,
     value = value,
     size = size,
     category = grp,
     symbol=symbol
   ) %>%
   echarts4r::e_graph_edges(
     edges = edges_go,
     source = source,
     target = target,
     value = value,
     size = size
   ) %>%
  #echarts4r::e_labels(nodes$label, formatter={"b"},font_size=4)%>%
   echarts4r::e_title("Network", "Gene Ontology") %>%
   echarts4r::e_tooltip()
```
