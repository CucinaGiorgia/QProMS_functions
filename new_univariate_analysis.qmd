---
title: "New Univariate Analysis"
format: html
editor: visual
warning: false
---

## Libraries loading and sources

```{r loading-libreries, echo=FALSE}
library(data.table)
library(janitor)
library(here)
library(dplyr)
library(stringr)
library(echarts4r)
library(reactable)
library(htmltools)
library(ComplexHeatmap)
library(clusterProfiler)
library(org.Hs.eg.db)
library(gt)
library(visNetwork)
library(ggplot2)
library(vsn)
#Ho rimosso in pacchetto corrmorant perch√® dava errore su Mac
library(ComplexHeatmap)
library(STRINGdb)
library(igraph)
library(network)
library(qgraph)
library(networkD3)
library(httr)
library(jsonlite)
library(rbioapi)

source(file = here::here("myfun_test.R"))
source(file = here::here("theme_ggplot_test.R"))

source(file = here::here("r6class_app.R"))


r6 <- QProMS$new()

```

## Loading raw data

```{r loading-data-1}
raw_data <- loading_data(file_path = here::here("proteinGroups.txt"))
```

```{r loading-data-2}
r6$loading_data(
  input_path = "proteinGroups.txt",
  input_type = "max_quant"
)
```

## Make Experimental Design

```{r make-expdesign-1}
exp_des <- exp_design (data=raw_data, pattern_interest = "lfq_intensity_bc_")
```

```{r make-expdesign-2}
r6$make_expdesign(
  start_with = "lfq_intensity_bc_"
)
```

## Data pre-processing

```{r Data preprocessing 1}
data_pre <- pre_process (data=raw_data, pattern_interest =  "lfq_intensity_bc_")
```

```{r Data preprocessing 2}
r6$pg_preprocessing()
```

## Data wrangling merged table (exp_des+pre_process)

```{r Wrangling/Data filtered}
data_wrang <- data_wrangling(data=data_pre,
                             pep_filter = "peptides",
                             pep_thr = 2)
```

```{r data-wrangling}
r6$data_wrangling(
  valid_val_filter = "alog",
  valid_val_thr = 0.75,
  pep_filter = "peptides",
  pep_thr = 2,
  rev = TRUE,
  cont = TRUE,
  oibs = TRUE
)
```

## Filter application

```{r Data Filtered}
data_filt <- data_filtered(data = data_wrang,
                           valid_val_filter = "alog",
                           valid_val_thr = 0.75)
```

## Data imputation

```{r Data imputed}
data_imput <- data_imputed (data= data_filt,
                         shift = 1.8, 
                         scale = 0.3, 
                         unique_visual = FALSE)

```

```{r Imputation}
r6$imputation()
```

## Color palette

```{r Palette}
n_of_color <- max(exp_des %>% dplyr::count(replicate) %>% dplyr::pull(n))
color_palette <- viridis::viridis(n = n_of_color , direction = -1, end = 0.70, begin = 0.30)

```

## Quality control

```{r Protein count by condition}
barplot_count(data = data_filt)
```

```{r protein-counts}
r6$plot_protein_counts() 
```

```{r Protein Coverage}
barplot_cover(data = data_filt)+
  theme(legend.position = "none")
```

```{r valid-values}
r6$plot_protein_coverage()
```

```{r Normalized data distribution}
boxplot(data=data_filt)
```

```{r plot-dis}
r6$plot_distribution()
```

## Plots

```{r Missing data distribution}
densityplot(data=data_filt)
```

```{r plot-missval2}
r6$plot_missval_distribution()
```

```{r Plot Missing data}
barplot_missval(data=data_filt)
```

```{r plot-missval1}
r6$plot_missing_data()
```

```{r Plot imputation}
den_imput(data=data_filt)    
```

```{r plot-imputation}
r6$plot_imputation()
```

```{r Heatmap}
htmap(data = data_filt)
```

```{r plot-corr}
r6$plot_correlation_interactive()
```

## PCA

```{r PCA 1}
pca <- prcomp(t(mat(data= data_imput)), center = TRUE, scale = TRUE) 
      
## create a data.frame for the first 3 PC
pca_table <- data.frame(label = rownames(pca$x),
                        x = pca$x[, 1],
                        y = pca$x[, 2],
                        z = pca$x[, 3]) %>% 
  dplyr::left_join(exp_des, by = "label") %>% 
  group_by(condition)
 

pca_plot(data=pca_table)

```

```{r pca}
r6$plot_pca(view_3d = FALSE)
```

## Statistical Analysis

```{r Statistics t-test}
r6$define_tests()
tests <- c("rev_vs_dmso", "nw_vs_dmso")
r6$stat_t_test(
  data = r6$imputed_data,
  test = tests,
  fc = 1,
  alpha = 0.05
)
```

## Volcao Plot

```{r VOlcano}
data <- r6$stat_table%>% 
  ggplot2::ggplot(aes(x=rev_vs_dmso_fold_change,
                      y=-log10(rev_vs_dmso_p_val),
                      color=dplyr::case_when(rev_vs_dmso_fold_change > 1 & -log10(rev_vs_dmso_p_val) > 0.5 ~ "red",
                              rev_vs_dmso_fold_change < -1 & -log10(rev_vs_dmso_p_val) > 0.5 ~ "blue",
                              TRUE ~ "grey"))) +
  geom_point()+
  theme_cuc()+
  geom_hline(yintercept = 0.5, linetype="longdash")+
  geom_vline(xintercept = c(-1, 1), linetype="longdash")+
  scale_color_identity()+
  xlim(-7,NA)+
  labs(title= "Volcano plot", subtitle= "Rev VS Dmso", x="Fold change", y= "P-value")
print(data)
```

```{r plot-volcano}
r6$plot_volcano(test = tests, highlights_names = c("VCAN", "STAT3"))
```

## Significant Data

```{r Dataset significat}
sig <- significant(data=r6$stat_table, test = "rev_vs_dmso")
```

### Only Up-regulated

```{r Filter Significant Up}
up_down <- sig_up_down(data=sig, remove="Down")
```

# STRINGdb

### Nodes & Edges

```{r Create Nodes & Edges}
nodes <- nodes(data=up_down)

edges <- edges(data= nodes, score=0.4)
```

### Filter Nodes

```{r Filter Nodes Degree 0}
nodes <- filter_nodes (datanodes =nodes, data_edges = edges)
```

### Plot Network

```{r echart Network}
plot_net(datanode=nodes, dataedge=edges)
```

### From data to net

```{r All from nodes to network}
plot_all (
  data = r6$stat_table,
  test = "nw_vs_dmso",
  remove = "Down",
  score = 0.4,
  animation = FALSE,
  layout = "force",
  no_edge = TRUE
)
```

# INTACTdb

## Da togliere
```{r IntAct-static}
intact_nodes <- nodes %>% 
  pull(name) %>% 
  bitr(fromType="SYMBOL", toType="UNIPROT", OrgDb="org.Hs.eg.db") %>%
   dplyr::distinct(SYMBOL, .keep_all = TRUE) %>% 
  left_join(sig, by=c("SYMBOL"="gene_names")) 


rba_list <- rba_reactome_interactors_static(proteins=intact_nodes$UNIPROT, endpoint = "details")



#Create empty DataFrame
df <- data.frame(Source_Number = numeric(), Source = numeric(), Target_Number = numeric(), Target = numeric(), Evidences=numeric(), Score = numeric())

# Fill in the Data Frame                  
for (i in 1:length(rba_list[[2]])) { # Iterate over the entries
  acc_val <- rba_list[["entities"]][[i]][["acc"]] # Extract entry name
  count_val <- rba_list[["entities"]][[i]][["count"]] # Extract count of interactors
  if (count_val > 0) { # Consider only proteins with at least 1 interactor
    for (j in 1:count_val) { # Iterate over the interactors
      acc_interactor <- rba_list[["entities"]][[i]][["interactors"]][[j]][["acc"]] # Extract interactor name
      score_interactor <- rba_list[["entities"]][[i]][["interactors"]][[j]][["score"]] # Extract score
      evidences_interactor <- rba_list[["entities"]][[i]][["interactors"]][[j]][["evidences"]]
      if(evidences_interactor >2){
        df<- rbind(df, data.frame(Source_Number = i,
                                  Source = acc_val,
                                  Target_Number = j,
                                  Target = acc_interactor,
                                  Evidences = evidences_interactor,
                                  Score = score_interactor))
      } else {
        df <- rbind (df, data.frame(Source_Number=i,
                                    Source = acc_val,
                                    Target_Number = "NULL",
                                    Target = "NULL",
                                    Evidences="NULL",
                                    Score = "NULL"))
      }}} else {
        df<- rbind (df, data.frame(Source_Number=i,
                                    Source = acc_val,
                                    Target_Number = "NULL",
                                    Target = "NULL",
                                    Evidences="NULL",
                                    Score = "NULL"))
      }
}  
print(df)

unique_df <- df

count_df <- unique(df) %>%
  group_by (Source) %>%
  count()

for (i in 1:nrow(count_df)){
  if(count_df[["n"]][i]>1){
    unique_df <- unique_df %>%
      filter(!(Source==count_df[["Source"]][i] & Score=="NULL"))
  }
}

print(unique_df)

#Back to Source Gene Name
source_static <- source_db(data = unique_df)



edges_intact <- function(data){
  data <- data %>% 
  dplyr::pull(Target) %>%
  bitr(fromType="UNIPROT", toType="SYMBOL", OrgDb="org.Hs.eg.db") %>% 
  dplyr::rename("Target"="SYMBOL") %>%
  dplyr::left_join(Source, by= c("UNIPROT"="Target")) %>% 
  dplyr::rename("Value"="Score") %>%
  dplyr::mutate(loop=if_else(Source==Target, 0, 1)) %>% 
  dplyr::filter(loop!=0) %>% 
  dplyr::select(Source, Target, Value) %>% 
  as.double(Value) %>% 
  dplyr::mutate(column=0)  
}



edges1 <- unique_df %>% 
  dplyr::pull(Target) %>%
  bitr(fromType="UNIPROT", toType="SYMBOL", OrgDb="org.Hs.eg.db") %>% 
  dplyr::rename("Target"="SYMBOL") %>%
  dplyr::left_join(Source, by= c("UNIPROT"="Target")) %>% 
  dplyr::rename("Value"="Score") %>%
  dplyr::mutate(loop=if_else(Source==Target, 0, 1)) %>% 
  dplyr::filter(loop!=0) %>% 
  dplyr::select(Source, Target, Value) %>% 
  as.double(Value) %>% 
  dplyr::mutate(column=0)
  


nodes1<- prova %>% 
  dplyr::select(!UNIPROT) %>% 
  dplyr::rename(name=SYMBOL, value =p_adj, size = p_val, grp = regulation) %>% 
    dplyr::mutate(value = -log10(value)) %>% 
    dplyr::mutate(size = -log10(size)*5) %>% 
    dplyr::mutate(grp = as.factor(grp)) %>% 
  dplyr::mutate(column=0)



plot_net(datanode=nodes, dataedge=edges)

nodes_true <- edges1 %>% 
  dplyr::left_join(nodes1, by = "column") %>%
  dplyr::mutate(node1=if_else(Target==name, 0, 1))  %>% 
  dplyr::filter(node1=="0") %>% 
  dplyr::select(Source, Target, Value) %>% 
  distinct(Value, .keep_all = TRUE) 


edges <- edges %>% 
  dplyr::left_join(nodes_true, by = "Source") %>% 
  dplyr::select(Source, Target.x, Value.x, Value.y) %>% 
   dplyr::rename(Target=Target.x, Value_s=Value.x, Value_i=Value.y) %>% 
  dplyr::select(Source, Target, Value_s, Value_i) %>% 
  as.double(Value_i) %>% 
  dplyr::mutate(dplyr::if_else(is.na(Value_i), 0, Value_i))

```

### IntAct PSICQUIC

```{r Intact PSICQUIC}
genes <- sig %>%
  dplyr::filter(regulation == "down") %>%
  pull(gene_names)

# purrr::map(.x = 1:115,
#            .f = ~ intact_list$entities[[.x]])

intact_edge <- function(gene_vector) {
  intact_list <- rba_reactome_interactors_psicquic(gene_vector, resource = "IntAct", details = TRUE)
  
  all_interactions <- purrr::map(.x = 1:length(gene_vector),
                                 .f = ~ intact_list$entities[[.x]])
  
  res <- purrr::map(.x = all_interactions, .f = ~ keep_only_if_present(.x)) %>%
    purrr::compact() %>%
    purrr::reduce(bind_rows) %>%
    dplyr::select(source, alias, score, accURL, evidences) %>%
    tidyr::drop_na() %>%
    dplyr::filter(source != alias)
  
  return(res)
}

keep_only_if_present <- function(lista) {
  n_interaction <- lista$count
  name_source <- lista$acc
  
  res <-
    purrr::map(
      .x = 1:n_interaction,
      .f = ~ lista$interactors[[.x]] %>% purrr::list_modify(source = name_source)
    ) %>%
    purrr::keep(~ all(.x$alias %in% pull(nodes, name)))
  
  return(res)
}

genes <- nodes %>% pull(name)

intact_edge(genes)

```

```{r CORUM}
library(OmnipathR)


complexes <- import_omnipath_complexes(resources = "CORUM")
query <- nodes$name

complexes_query_genes_any <-
  unique(get_complex_genes(complexes, query,
                           total_match = FALSE))

edges_corum <-  complexes_query_genes_any %>%
  dplyr::select(name, components_genesymbols) %>%
  tidyr::separate_rows(components_genesymbols, sep = "_") %>%
  dplyr::filter(components_genesymbols %in% query) %>%
  dplyr::mutate(unique_names = paste0(name, "__", components_genesymbols)) %>%
  dplyr::distinct(unique_names, .keep_all = TRUE) %>%
  dplyr::select(name, components_genesymbols) %>%
  get_dupes(name) %>%
  dplyr::filter(dupe_count == 2) %>%
  tibble::rowid_to_column() %>%
  dplyr::mutate(nodi = if_else(gtools::odd(rowid), "nodo", "target")) %>%
  dplyr::select(name, nodi, components_genesymbols) %>%
  tidyr::pivot_wider(name, values_from = components_genesymbols, names_from = nodi) %>%
  dplyr::mutate(Value = 10) %>%
  dplyr::rename(Source = nodo, Target = target) %>%
  dplyr::select(Source, Target, Value)

 plot_net(datanode=nodes, dataedge=edges_corum)
  
     
 echarts4r::e_charts(animation = FALSE) %>%
   echarts4r::e_graph(
     roam = TRUE,
     force = list(
       initLayout = "force",
       repulsion = 100,
       edgeLength = 30,
       layoutAnimation = FALSE
     ),
     itemStyle = list(opacity = 0.65),
     lineStyle = list(curveness = 0.2),
     emphasis = list(focus = "adjacency",
                     lineStyle = list(width = 10))
   ) %>%
   echarts4r::e_graph_nodes(
     nodes = nodes,
     names = name,
     value = value,
     size = size,
     category = grp
   ) %>%
   echarts4r::e_graph_edges(
     edges = edges_corum,
     source = Source,
     target = Target,
     value = Value,
     size = Value
   ) %>%
   echarts4r::e_color(c("blue", "red")) %>%
   echarts4r::e_labels(nodes$name, font_size = 4) %>%
   echarts4r::e_title("Network", "Up & Down Regulated") %>%
   echarts4r::e_tooltip()
 

 edges_all <-  edges %>% dplyr::bind_rows(edges_corum) %>% 
   dplyr::mutate(color= if_else(Value==10, "red","green")) %>% as.data.frame()
 

 nodes_corum <- edges_corum <-  complexes_query_genes_any %>%
   dplyr::select(components_genesymbols) %>% 
   tidyr::separate_rows(components_genesymbols, sep = "_") %>%
   dplyr::filter(components_genesymbols %in% query) %>% 
   dplyr::distinct(components_genesymbols, .keep_all = TRUE) %>% 
   dplyr::rename(name=components_genesymbols) %>% 
   merge(nodes) %>% 
   dplyr::mutate(grp="corum")
   
 
 nodes_all <- nodes %>% 
   dplyr::mutate(grp="string") %>% 
   dplyr::bind_rows(nodes_corum) %>% as.data.frame()
 
p <-echarts4r::e_charts(animation = FALSE) %>%
   echarts4r::e_graph(
     roam = TRUE,
     force = list(
       initLayout = "force",
       repulsion = 100,
       edgeLength = 30,
       layoutAnimation = FALSE
     ),
     # itemStyle = list(opacity = 0.65),
     autoCurveness = TRUE,
     emphasis = list(focus = "adjacency",
                     lineStyle = list(width = 10))
   ) %>%
   echarts4r::e_graph_nodes(
     nodes = nodes,
     names = name,
     value = value,
     size = size,
     category = grp
   ) %>%
   echarts4r::e_graph_edges(
     edges = edges_all,
     source = Source,
     target = Target,
     value = Value,
     size = Value
   ) %>%
   # echarts4r::e_add_nested("itemStyle", color, .data = link, .serie = 12) %>% 
   # echarts4r::e_color(c("blue", "red")) %>%
   # echarts4r::e_labels(nodes$name, font_size=4)%>%
   echarts4r::e_title("Network", "Up & Down Regulated") %>%
   echarts4r::e_tooltip()
 
# p[["x"]][["opts"]][["series"]][[1]][["links"]][[1]][["lineStyle"]] <- list(width =p[["x"]][["opts"]][["series"]][[1]][["links"]][[1]][["lineStyle"]][["width"]], color = "red")


color_edge <- function(list, edge){
  n_edges<- nrow(edge)
  for (i in 1:n_edges){
     source<- list[["x"]][["opts"]][["series"]][[1]][["links"]][[i]]$source
  target<- list[["x"]][["opts"]][["series"]][[1]][["links"]][[i]]$target
  color<- edge %>% dplyr::filter(Source==source, Target==target) %>% pull(color)
  list[["x"]][["opts"]][["series"]][[1]][["links"]][[i]][["lineStyle"]] <- list(width =list[["x"]][["opts"]][["series"]][[1]][["links"]][[i]][["lineStyle"]][["width"]], color = color)

  }

  return(list)

}

tidyr::expand_grid(target = c("gene1", "gene2", "gene3"), source = c("gene1", "gene2", "gene3")) %>% 
  dplyr::filter(target != source)

purrr::map(.x = 1:45, .f = ~ color_edge_single(list = p, edge = edges_all, index = .x))

color_edge_single <- function(list, edge, index) {
  
  source<- list[["x"]][["opts"]][["series"]][[1]][["links"]][[index]]$source
  target<- list[["x"]][["opts"]][["series"]][[1]][["links"]][[index]]$target
  
  color<- edge %>% dplyr::filter(Source==source, Target==target) %>% pull(color) ## se il filter non √® una riga sola bisogna fare qualcosa
  
  list[["x"]][["opts"]][["series"]][[1]][["links"]][[index]][["lineStyle"]] <- 
    list(width =list[["x"]][["opts"]][["series"]][[1]][["links"]][[index]][["lineStyle"]][["width"]],
         color = color)
   
  return(list)
}
n_edges<- nrow(edges_all)
color_edge_single(p, edges_all, 2)

p2 <- color_edge(p, edges_all)
p2
  
nodes <- nodes %>%
  dplyr::mutate(color = if_else(value>2, "red", "blue"))
  View()
```

```{r}
a <- complexes_query_genes_any %>%
  dplyr::select(name, components_genesymbols) %>%
  tidyr::separate_rows(components_genesymbols, sep = "_") %>%
  dplyr::filter(components_genesymbols %in% query) %>%
  dplyr::mutate(unique_names = paste0(name, "__", components_genesymbols)) %>%
  dplyr::distinct(unique_names, .keep_all = TRUE) %>%
  dplyr::select(name, components_genesymbols) %>%
  get_dupes(name) %>%
  dplyr::filter(dupe_count > 2) %>% 
  pull(components_genesymbols) 

b <- tidyr::expand_grid(Target = a, Source = a) %>% 
  dplyr::filter(Target != Source) %>% 
  dplyr::mutate(Value = 10)

final_edge <- b %>% bind_rows(edges_corum)
```
