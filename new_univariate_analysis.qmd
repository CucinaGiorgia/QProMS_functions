---
title: "New Univariate Analysis"
format: html
editor: visual
---



# Libraries loading and sources

```{r loading-libreries, echo=FALSE}
library(data.table)
library(janitor)
library(here)
library(dplyr)
library(stringr)
library(echarts4r)
library(reactable)
library(htmltools)
library(ComplexHeatmap)
library(clusterProfiler)
library(org.Hs.eg.db)
library(gt)
library(visNetwork)
library(ggplot2)
library(vsn)
library(corrmorant)

source(file = here::here("r6class_app.R"))

source(file = "C:/Users/MSU/Documents/GC/Analysis/theme_ggplot_test.R")
```

#Loading raw data

```{r loading-data}

loading_data <- function(file_path){
  raw_data <- data.table::fread(file_path) %>% #Carica file
    tibble::as.tibble(.name_repair=janitor::make_clean_names) #Modifica file: il nome delle colonne senza spazi e con minuscolo
  return(raw_data)
}

raw_data <- loading_data(file_path = here::here("proteinGroups.txt"))

```

```{r make-expdesig}
#Creo table exp_des
exp_design <- function(data, pattern_interest){
  exp_des <- data %>% 
    dplyr::mutate(dplyr::across(dplyr::starts_with(pattern_interest),  ~ log2(.) )) %>% #Vslori intensity in log2
    dplyr::select(gene_names, dplyr::starts_with(pattern_interest)) %>% #Tolte tutte le colonne, tranne le due in ()
    tidyr::pivot_longer(!gene_names, names_to="key", values_to= "intensity") %>% #Raggruppa tutte le lfq in unica colonna
    dplyr::mutate(label = stringr::str_remove(key, "lfq_intensity_bc_")) %>%
    dplyr::mutate(condition = stringr::str_remove(label, "_[^_]*$")) %>%
    dplyr::mutate(replicate = stringr::str_remove(label, ".*_")) %>% 
    dplyr::na_if(., -Inf) #Se le intensity sono -Inf diventano NA
}

exp_des <- exp_design(data=raw_data, pattern_interest = "lfq_intensity_bc_")
```

```{r Data preprocessing and wrangling/Data filtered}
pre_process <- function(data, pattern_interest){
  dplyr::mutate(dplyr::across(dplyr::starts_with(pattern_interest), ~ log2(.))) %>%
    dplyr::mutate(dplyr::across(dplyr::starts_with(self$intensity_type), ~ dplyr::na_if(.,-Inf)))
}

data_wrangling <- pre_process(data=raw_data, pattern_interest = "lfq_intensity_bc_") %>% 
  function(data, 
           valid_val_filter, 
           valid_val_thr, 
           pep_filter, 
           pep_thr, 
           rev,
           cont,
           oibs){
    data %>% 
  dplyr::select(protein_i_ds, gene_names, id) %>%
  dplyr::mutate(gene_names = stringr::str_extract(gene_names, "[^;]*")) %>%
 ## every protein groups now have only 1 gene name associated to it
  dplyr::rename(unique_gene_names = gene_names) %>%
  janitor::get_dupes(unique_gene_names) %>%
  dplyr::mutate(unique_gene_names = dplyr::case_when(
  unique_gene_names != "" ~ paste0(
  unique_gene_names, "__",
  stringr::str_extract(protein_i_ds, "[^;]*")),
   TRUE ~ stringr::str_extract(protein_i_ds, "[^;]*")
           )) %>%
        dplyr::select(unique_gene_names, id) %>%
        dplyr::right_join(data, by = "id") %>%
        dplyr::mutate(
          gene_names = dplyr::case_when(unique_gene_names != "" ~ unique_gene_names,
                                        TRUE ~ gene_names)
        ) %>%
        dplyr::select(-unique_gene_names) %>%
        dplyr::mutate(gene_names = dplyr::if_else(
          gene_names == "",
          stringr::str_extract(protein_i_ds, "[^;]*"),
          gene_names
        )) %>%
        dplyr::mutate(gene_names = stringr::str_extract(gene_names, "[^;]*")) %>% 
        dplyr::select(
          gene_names,
          dplyr::all_of(expdesign$key),
          peptides,
          razor_unique_peptides,
          unique_peptides,
          reverse,
          potential_contaminant,
          only_identified_by_site
        ) %>% 
        tidyr::pivot_longer(
          !c(gene_names,
             peptides,
             razor_unique_peptides,
             unique_peptides,
             reverse,
             potential_contaminant,
             only_identified_by_site),
          names_to = "key",
          values_to = "raw_intensity"
        ) %>% 
        dplyr::inner_join(., expdesign, by = "key") %>%   #aggiunge righe e colonne che matchano tra expdesign e data
        dplyr::mutate(bin_intensity = dplyr::if_else(is.na(raw_intensity), 0, 1)) %>%  #Creo nuova colonna. 1 se valore esite, 0 se NA
        dplyr::select(-key)
    
  }
```

